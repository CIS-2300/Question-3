# -*- coding: utf-8 -*-
"""Q3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cHEkjXqfVsLtDk6ztJYJ6UaecxRLVnif
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
import sqlite3

sports_teams = {
                  'mens_swimming': ['https://csidolphins.com/sports/mens-swimming-and-diving/roster/2023-2024?view=2','https://yorkathletics.com/sports/mens-swimming-and-diving/roster','https://athletics.baruch.cuny.edu/sports/mens-swimming-and-diving/roster?view=2','https://www.brooklyncollegeathletics.com/sports/mens-swimming-and-diving/roster','https://lindenwoodlions.com/sports/mens-swimming-and-diving/roster','https://mckbearcats.com/sports/mens-swimming-and-diving/roster','https://ramapoathletics.com/sports/mens-swimming-and-diving/roster','https://oneontaathletics.com/sports/mens-swimming-and-diving/roster','https://bubearcats.com/sports/mens-swimming-and-diving/roster/2021-22','https://albrightathletics.com/sports/mens-swimming-and-diving/roster/2021-22'],
                  'mens_volleyball': ['https://ccnyathletics.com/sports/mens-volleyball/roster?view=2', 'https://lehmanathletics.com/sports/mens-volleyball/roster?view=2','https://www.brooklyncollegeathletics.com/sports/mens-volleyball/roster?view=2','https://johnjayathletics.com/sports/mens-volleyball/roster','https://athletics.baruch.cuny.edu/sports/mens-volleyball/roster?view=2','https://athletics.baruch.cuny.edu/sports/mens-volleyball/roster','https://mecathletics.com/sports/mens-volleyball/roster','https://www.huntercollegeathletics.com/sports/mens-volleyball/roster','https://yorkathletics.com/sports/mens-volleyball/roster','https://ballstatesports.com/sports/mens-volleyball/roster'],
                  'womens_swimming':['https://csidolphins.com/sports/womens-swimming-and-diving/roster','https://queensknights.com/sports/womens-swimming-and-diving/roster','https://yorkathletics.com/sports/womens-swimming-and-diving/roster','https://athletics.baruch.cuny.edu/sports/womens-swimming-and-diving/roster/2021-22?path=wswim','https://www.brooklyncollegeathletics.com/sports/womens-swimming-and-diving/roster','https://lindenwoodlions.com/sports/womens-swimming-and-diving/roster','https://mckbearcats.com/sports/womens-swimming-and-diving/roster','https://ramapoathletics.com/sports/womens-swimming-and-diving/roster','https://keanathletics.com/sports/womens-swimming-and-diving/roster','https://oneontaathletics.com/sports/womens-swimming-and-diving/roster'],
                  'womens_volleyball':['https://bmccathletics.com/sports/womens-volleyball/roster?view=2','https://yorkathletics.com/sports/womens-volleyball/roster?view=2','https://hostosathletics.com/sports/womens-volleyball/roster?view=2','https://bronxbroncos.com/sports/womens-volleyball/roster/2021','https://queensknights.com/sports/womens-volleyball/roster?view=2','https://augustajags.com/sports/wvball/roster','https://flaglerathletics.com/sports/womens-volleyball/roster','https://pacersports.com/sports/womens-volleyball/roster','https://www.golhu.com/sports/womens-volleyball/roster']
                }

def average_height(url_list):

  # list to store heights
  heights = []
  names = []

  # vist each url in the list
  for url in url_list:

    # headers Source: https://www.zenrows.com/blog/web-scraping-headers#user-agent
    headers = {
      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'Accept-Language': 'en-US,en;q=0.9',
      'Connection': 'keep-alive'
      }

    # making a request to the server
    page = requests.get(url, headers=headers)

    # scrape data only if connection is successful
    if page.status_code == 200:
      # import the raw html into BeautifulSoup
      soup = BeautifulSoup(page.content, 'html.parser')

      # find all td tags with a class of height
      raw_heights = soup.find_all('td', class_ ='height')

      # find all td tags with a class of sidearm-table-player-name
      name_tags = soup.find_all('td', class_ ='sidearm-table-player-name')

    # zip the names and heights together to keep them aligned
    for name_tag, height_tag in zip(name_tags, raw_heights):
        name = name_tag.get_text().strip()
        x = height_tag.get_text().strip()

      #split the string by '-'
        if '-' in x:
          parts = x.split('-')
          if len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit():
            feet = float(parts[0]) * 12
            inches = float(parts[1])

           #converting height to inches
            height_inches = feet + inches
            names.append(name)
            heights.append(height_inches)

  # organized the data as a dictionary
  data = {
      'Name': names,
      'Height': heights
  }

  df = pd.DataFrame(data)
  return df

# function to export the data
def export_team_rosters(sports_teams):
    for team_name, urls in sports_teams.items():
        # get the player data for each team
        team_df = average_height(urls)
        # export the data to a CSV file
        team_df.to_csv(f'{team_name}_roster.csv', index=False)

#call the export function to save all teams' rosters to CSV
export_team_rosters(sports_teams)

#Dataframe for men's swimming
mens_swim_df = average_height(sports_teams['mens_swimming'])

#Dataframe for men's volleyball
mens_volleyball_df = average_height(sports_teams['mens_volleyball'])

#Dataframe for women's swimming
womens_swim_df = average_height(sports_teams['womens_swimming'])

#Dataframe for women's volleyball
womens_volleyball_df = average_height(sports_teams['womens_volleyball'])

#finding the 5 tallest height for men swim
top_heights_menswim = mens_swim_df['Height'].nlargest(5).unique()
fifth_height = top_heights_menswim[-1]

# filter the dataframe to include all athletes with height >= fifth height
mens_swim_df[mens_swim_df['Height'] >= fifth_height]

#finding the 5 shortest height
shortest_heights_menswim = mens_swim_df['Height'].nsmallest(5).unique()
fifth_height = shortest_heights_menswim[-1]

# filter the dataframe to include all athletes with height >= fifth height
mens_swim_df[mens_swim_df['Height'] <= fifth_height]

#finding the 5 tallest height for men volleyball
top_heights_mensvolleyball = mens_volleyball_df['Height'].nlargest(5).unique()
fifth_height = top_heights_mensvolleyball[-1]

# filter the dataframe to include all athletes with height >= fifth height
mens_volleyball_df[mens_volleyball_df['Height'] >= fifth_height]

#finding the 5 shortest height
shortest_heights_mensvolleyball = mens_volleyball_df['Height'].nsmallest(5).unique()
fifth_height = shortest_heights_mensvolleyball[-1]

# filter the dataframe to include all athletes with height >= fifth height
mens_volleyball_df[mens_volleyball_df['Height'] <= fifth_height]

#finding the 5 tallest height for women swim
top_heights_womenswim = womens_swim_df['Height'].nlargest(5).unique()
fifth_height = top_heights_womenswim[-1]

# filter the dataframe to include all athletes with height >= fifth height
womens_swim_df[womens_swim_df['Height'] >= fifth_height]

#finding the 5 shortest height
shortest_heights_womenswim = womens_swim_df['Height'].nsmallest(5).unique()
fifth_height = shortest_heights_womenswim[-1]

# filter the dataframe to include all athletes with height >= fifth height
womens_swim_df[womens_swim_df['Height'] <= fifth_height]

#finding the 5 tallest height for women's volleyball
top_heights_womensvolleyball = womens_volleyball_df['Height'].nlargest(5).unique()
fifth_height = top_heights_womensvolleyball[-1]

# filter the dataframe to include all athletes with height >= fifth height
womens_volleyball_df[womens_volleyball_df['Height'] >= fifth_height]

#finding the 5 shortest height
shortest_heights_womensvolleyball = womens_volleyball_df['Height'].nsmallest(5).unique()
fifth_height = shortest_heights_womensvolleyball[-1]

# filter the dataframe to include all athletes with height >= fifth height
womens_volleyball_df[womens_volleyball_df['Height'] <= fifth_height]

#show datas
mens_swim_df.describe()
mens_volleyball_df.describe()
womens_swim_df.describe()
womens_volleyball_df.describe()

#finding the average and round it to 2 decimal places
mens_swim_avg = mens_swim_df['Height'].mean()
print(f'The average height of the mens swim team is {mens_swim_avg:.2f} inches.')

mens_volleyball_avg = mens_volleyball_df['Height'].mean()
print(f"The average height of the men's volleyball team is {mens_volleyball_avg:.2f} inches.")

womens_swim_avg = womens_swim_df['Height'].mean()
print(f"The average height of the women's swim team is {womens_swim_avg:.2f} inches.")

womens_volleyball_avg = womens_volleyball_df['Height'].mean()
print(f"The average height of the women's volleyball team is {womens_volleyball_avg:.2f} inches.")

# Generate a pandas dataframe that has two columns: Team, Avg Height
avg_data = {
              'Team' : ['Mens Swim Team','Mens Volleyball Team', "Women's Swim Team", "Women's Volleyball Team"],
              'Avg Height' : [mens_swim_avg , mens_volleyball_avg, womens_swim_avg, womens_volleyball_avg]
          }

# convert dictionary to dataframe
avg_data_df = pd.DataFrame(avg_data)
avg_data_df

#show data in a bar graph
avg_data_df.plot.bar(x='Team', y = 'Avg Height', title='Avg Heights Among Athletes')
plt.show()

#organize data to sql
conn = sqlite3.connect('Sports Teams.db')
avg_data_df. to_sql('Average_Heights', conn, if_exists='replace', index= False)

result_df = pd.read_sql("SELECT * FROM average_heights", conn)

conn.close()

print(result_df)